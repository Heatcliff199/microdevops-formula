{#
- prepare acme
- Set node_ips, node_transport_port for ufw_simple purposes
- Apply salt elasticsearch*.example.com state.apply ufw_simple.ufw_simple
- Apply salt elasticsearch*.example.com state.apply elasticsearch.elasticsearch
- on every node set users passwords `docker exec -it elasticsearch-elastic.example.com bash -c '/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive'`
#}

{% from 'ufw_simple/vars.jinja' import vars with context %}

{%
set node_ips = {
  'elasticsearch1.example.com': '10.0.10.2',
  'elasticsearch2.example.com': '10.0.10.3',
  'elasticsearch3.example.com': '10.0.10.4',
}
%}

{%- set node_transport_port = 9300 %}
ufw_simple:
  enabled: True
  logging: 'off'
  allow:
    transport_a:
      proto: 'tcp'
      from:
        {{ node_ips }}
      to_port: {{ node_transport_port }}

elasticsearch:
  docker-ce_version: 5:20.10.8
  image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
  cluster: elasticsearch.example.com
  acme_account: example.com
  java_opts: '-Xms4096m -Xmx4096m'
  config: |
      # additional common settings if needed
  ports:
    http: 9200
    transport: {{ node_transport_port }}
  nodes:
    roles:
      elasticsearch1.example.com: [ master, data, data_content, data_hot, data_warm, data_cold, data_frozen, ingest, ml, remote_cluster_client, transform ]
      elasticsearch1.example.com: [ master, data, data_content, data_hot, data_warm, data_cold, data_frozen, ingest, ml, remote_cluster_client, transform ]
      elasticsearch1.example.com: [ master, data, data_content, data_hot, data_warm, data_cold, data_frozen, ingest, ml, remote_cluster_client, transform ]
    master:
      - elasticsearch1.example.com
      - elasticsearch2.example.com
      - elasticsearch3.example.com
    # Use as is
    ips:
      {% for key, val in node_ips.items() %}{{ key }}: {{ val }}
      {% endfor %}