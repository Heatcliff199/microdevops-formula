sentry:
  acme_account: example.com
  acme_domain: sentry.example.com
  version: '22.6.0'
  secret: '7lqun0fxeblz^m5i@!45*6+@263-b-i^^s&!2db*&792#41h*1'                            # To generate secret, leave blank and run state sentry
  url: 'https://sentry.example.com'
  admin_email: 'admin@example.com'
  admin_password: 'xxxxxxxxxxxxxxxxxx'
  fix_admin_permissions: True                                                             # https://github.com/getsentry/self-hosted/issues/1288
  enhance_image_sh: |
    apt-get update
    apt-get install -y gcc libsasl2-dev python-dev libldap2-dev libssl-dev
    pip install django-auth-ldap
    pip install sentry-ldap-auth
  config:
    features:
      auth_register: True
      projects_plugins: True
    email:
      backend: 'smtp'
      host: 'smtp.gmail.com'
      port: 587
      username: 'sentry@example.com'
      password: 'xxxxxxxxxxxxxxxxxx'
      tls: True
      from: root@localhost
      enable_replies: False
      reply_hostname: ''
    web:
      ssl: True
    google_auth:
      client_id: '012345678999-abcdefghijklmnopqrstuvwxyz123456.apps.googleusercontent.com'
      client_secret: 'ABCDEF-1q2w3e4r5t6y7u8i9o0pASDFGHJK'
    general:
      options:
        system:
          event_retention_days: 30
    ldap:
      enabled: True
      sentry_conf_py: |
        ################################################
        #                   LDAP AUTH                  #
        # https://github.com/Banno/getsentry-ldap-auth #
        ################################################
        import ldap
        from django_auth_ldap.config import LDAPSearch, GroupOfNamesType
        AUTH_LDAP_SERVER_URI = 'ldaps://ldap.example.com'
        AUTH_LDAP_BIND_DN = 'uid=ldap_reader,cn=users,dc=example,dc=com'
        AUTH_LDAP_BIND_PASSWORD = 'Secret123'
        AUTH_LDAP_USER_SEARCH = LDAPSearch(
          'cn=users,dc=example,dc=com',
          ldap.SCOPE_SUBTREE,
          '(uid=%(user)s)',
        )
        AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
          'cn=groups,dc=example,dc=com',
          ldap.SCOPE_SUBTREE,
          '(objectClass=groupOfNames)'
        )
        AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
        AUTH_LDAP_REQUIRE_GROUP = 'cn=sentry,cn=groups,dc=example,dc=com'
        AUTH_LDAP_DENY_GROUP = None
        AUTH_LDAP_USER_ATTR_MAP = {
          'username': 'uid',
          'name': 'cn',
          'email': 'mail'
        }
        AUTH_LDAP_FIND_GROUP_PERMS = True
        AUTH_LDAP_CACHE_GROUPS = False
        AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600
        AUTH_LDAP_DEFAULT_SENTRY_comANIZATION = u'example'
        AUTH_LDAP_SENTRY_SUBSCRIBE_BY_DEFAULT = True
        AUTH_LDAP_DEFAULT_EMAIL_DOMAIN = 'example.com'
        #AUTH_LDAP_MIRROR_GROUPS = True,
        AUTH_LDAP_SENTRY_GROUP_ROLE_MAPPING = {
          'owner': ['admins'],
          'admin': [],
          'member': ['sentry'],
        }
        AUTH_LDAP_SENTRY_comANIZATION_ROLE_TYPE = 'member'
        AUTH_LDAP_SENTRY_comANIZATION_GLOBAL_ACCESS = True
        AUTH_LDAP_SENTRY_USERNAME_FIELD = 'uid'
        AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (
          'sentry_ldap_auth.backend.SentryLdapBackend',
        )
        import logging
        logger = logging.getLogger('django_auth_ldap')
        logger.addHandler(logging.StreamHandler())
        logger.addHandler(logging.FileHandler(r"/data/ldap2.log"))
        logger.setLevel('DEBUG')
  webhooks:
    matrix:
      image: 'matrixdotorg/matrix-sentry-webhooks:latest'
      acme_account: example.com
      acme_domain: sentry-matrix-webhook.example.com
      env_vars:
        APP_PORT: 3000
        SENTRY_CLIENT_SECRET: 'yyyyyyyyyyyyyyyyyy'
        SENTRY_INCLUDE_TAGS: 'brand,BRAND,DOMAIN'
        MATRIX_HOMESERVER_URL: 'https://example.ems.host'
        MATRIX_ROOMS: 'room1/!aaaaaaaaaaaaaaaaaa:example.com|room2/!bbbbbbbbbbbbbbbbbb:example.com|room3/!cccccccccccccccccc:example.com|room4/!ddddddddddddddddd:example.com'
        MATRIX_TOKEN: 'zzzzzzzzzzzzzzzzzz'
        MATRIX_USER: '@sentry:example.com'





#######################################################################
# If necessary, you can install only a webhook.
# You can also build locally a docker image from a forked and modified repository by Roma Kasyanchuk

sentry:
  webhooks:
    matrix:
      use_roman_k_fork: True
      repo: 'https://github.com/kraicdesign/matrix-sentry-webhooks.git'
      image: 'docker.local/oxg-webhook/webhook'
      acme_account: example.com
      acme_domain: sentry-matrix-webhook.example.com
      env_vars:
        APP_PORT: 3000
        APP_TIMEOUT: 1000
        SENTRY_CLIENT_SECRET: 'yyyyyyyyyyyyyyyyyy'
        SENTRY_INCLUDE_TAGS: 'brand,BRAND,DOMAIN'
        MATRIX_HOMESERVER_URL: 'https://example.ems.host'
        MATRIX_ROOMS: 'room1/!aaaaaaaaaaaaaaaaaa:example.com|room2/!bbbbbbbbbbbbbbbbbb:example.com|room3/!cccccccccccccccccc:example.com|room4/!ddddddddddddddddd:example.com'
        MATRIX_TOKEN: 'zzzzzzzzzzzzzzzzzz'
        MATRIX_USER: '@sentry:example.com'



#######################################################################
# If necessary, you can configure a catcher root email only

sentry:
  catch_root_email:
    enabled: True
    catch_other_users_email: true
    newaliases: True
    SENTRY_URL: 'https://sentry.exampe.com/'
    SENTRY_DSN: 'https://71b11b6b8b814bc183e0c30a702eeb08@sentry.exampe.com/2'
