{#
Salt minion 3001+ with python3-pip deb package required for virtualenv.managed to work with recent python versions.

This file (alerta.jinja) should be included in pillar, see alerta.pillar.example.

Also you need to copy files or make symlinks:
salt://app/alerta -> ../../formulas/sysadmws-formula/app/files/alerta
pillar/app/alerta.jinja -> ../../formulas/sysadmws-formula/pillar/app/alerta.jinja

Also you need to set up acme_local.sh beforehand, see sysadmws-formula/pillar/pkg/acme_*.jinja.
And you need postgres formula.
#}

{#
Deploy:
- state.apply app.deploy
#}

{#
Logs and debug:
su - alerta
/opt/alerta/alerta/venv/bin/uwsgi --ini /etc/uwsgi/sites/alerta.ini # should not detach
tail -F /opt/alerta/alerta/uwsgi.log
tail -F /opt/alerta/alerta/alertad.log
#}

{#
References:
- http://docs.alerta.io/en/latest/gettingstarted/tutorial-1-deploy-alerta.html#tutorial-1
#}

{#
Migration to yaml based settings:
Define values in alerta1_example_com_settings.sls as yaml and assign pillar like this:
{% import_yaml 'app/example/alerta1_example_com_settings.sls' as alerta %}
{% include 'app/example/alerta.jinja' with context %}
#}
{% if alerta is defined %}
  {%- set appname = alerta['appname'] %}
  {%- set db_pass = alerta['db_pass'] %}
  {%- set domain = alerta['domain'] %}
  {%- set version = alerta['version'] %}
  {%- set webui_version = alerta['webui_version'] %}
  {%- set add_pip_install = alerta['add_pip_install'] %}
  {%- set cli_key_id = alerta['cli_key_id'] %}
  {%- set cli_key = alerta['cli_key'] %}
  {%- set telegram_key_id = alerta['telegram_key_id'] %}
  {%- set telegram_key = alerta['telegram_key'] %}
  {%- set secret_key = alerta['secret_key'] %}
  {%- set customers = alerta['customers'] %}
  {%- set telegram_template = alerta['telegram_template'] %}
  {%- set conf = alerta['conf'] %}
{% endif %}

postgres:
  use_upstream_repo: True
  version: '11'
  pkgs_extra:
  {%- if grains['oscodename'] in ['focal'] %}
    - postgresql-plpython3-11
  {%- else %}
    - postgresql-plpython-11
  {%- endif %}
    - postgresql-server-dev-11
  postgresconf: |-
    listen_addresses = '*'
  pg_hba.conf: salt://postgres/templates/pg_hba.conf.j2
  acls:
    - ['local', 'all', '{{ appname }}']
    - ['host', 'all', '{{ appname }}', '0/0']
  config_backup: False # depends on salt-call which is not available in salt-ssh
  users:
    {{ appname }}:
      ensure: present
      password: '{{ db_pass }}'
      createdb: False
      createroles: False
      inherit: True
      replication: False
  databases:
    {{ appname }}:
      owner: '{{ appname }}'
      template: 'template0'
      lc_ctype: 'en_US.UTF-8'
      lc_collate: 'en_US.UTF-8'
  extensions:
    uuid-ossp:
      maintenance_db: {{ appname }}

nginx:
  enabled: True
  configs: 'nginx/app_hosting'

pyenv:
  versions:
    python-3.7.8: True

pkg:
  {{ appname }}_before:
    when: 'PKG_BEFORE_DEPLOY'
    states:
      - pkg.installed:
          1:
            - pkgs:
                - libpcre3
                - libpcre3-dev
  {{ appname }}_after:
    when: 'PKG_AFTER_DEPLOY'
    states:
      - file.directory:
          1:
            - name: '/etc/uwsgi/sites'
            - user: 'root'
            - group: 'root'
            - makedirs: True
          2:
            - name: '/opt/alerta/{{ appname }}/uwsgi'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - makedirs: True
      - cmd.run:
          1:
            - name: 'rm -rf /opt/alerta/{{ appname }}/webuisrc /opt/alerta/{{ appname }}/html && mkdir -p /opt/alerta/{{ appname }}/webuisrc /opt/alerta/{{ appname }}/html && cd /opt/alerta/{{ appname }}/webuisrc && wget -q -O - https://github.com/alerta/alerta-webui/releases/download/{{ webui_version }}/alerta-webui.tar.gz | tar zxf - && cp -r -f dist/* /opt/alerta/{{ appname }}/html && rm -f /opt/alerta/{{ appname }}/html/config.json.example'
            - runas: '{{ appname }}'
          2:
            - name: 'sed -i /etc/nginx/sites-available/{{ appname }}.conf -e "s#__SOCKET__#/tmp/uwsgi-{{ appname }}.sock#"'
            - runas: 'root'
{% if add_pip_install is defined %}
          3:
            - name: '~/venv/bin/pip install --upgrade {{ add_pip_install }}'
            - cwd: '/opt/alerta/{{ appname }}/src'
            - runas: '{{ appname }}'
{% endif %}
      - file.managed:
          1:
            - name: '/opt/alerta/{{ appname }}/uwsgi/wsgi.py'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - mode: '0644'
            - contents: |
                from alerta import create_app
                app = create_app()
          2:
            - name: '/etc/uwsgi/sites/{{ appname }}.ini'
            - user: 'root'
            - group: 'root'
            - mode: '0644'
            - source: 'salt://app/alerta/uwsgi.ini'
            - replace: True
            - template: jinja
            - defaults:
                venv: '/opt/alerta/{{ appname }}/venv'
                chdir: '/opt/alerta/{{ appname }}/uwsgi'
                uid: '{{ appname }}'
                gid: '{{ appname }}'
                socket: '/tmp/uwsgi-{{ appname }}.sock'
                alertad_conf: '/opt/alerta/{{ appname }}/alertad.conf'
                uwsgi_log: '/opt/alerta/{{ appname }}/uwsgi.log'
          3:
            - name: '/etc/systemd/system/uwsgi-{{ appname }}.service'
            - user: 'root'
            - group: 'root'
            - source: 'salt://app/alerta/uwsgi.service'
            - replace: True
            - template: jinja
            - defaults:
                app: '{{ appname }}'
                bin_dir: '/opt/alerta/{{ appname }}/venv/bin'
                ini: '/etc/uwsgi/sites/{{ appname }}.ini'
          4:
            - name: '/opt/alerta/{{ appname }}/html/config.json'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - mode: '0644'
            - contents: |
                {"endpoint": "/api"}
          5:
            - name: '/opt/alerta/{{ appname }}/alertad.conf'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - source: 'salt://app/alerta/alertad.conf'
            - replace: True
            - template: jinja
            - defaults:
                secret_key: '{{ secret_key }}'
                app: '{{ appname }}'
                log_file: '/opt/alerta/{{ appname }}/alertad.log'
                db_pass: {{ db_pass }}
                conf: |
                  {{ conf|indent(width=18,indentfirst=False) }}
          6:
            - name: '/opt/alerta/{{ appname }}/.alerta.conf'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - mode: '0644'
            - contents: |
                [DEFAULT]
                endpoint = https://{{ domain }}/api
                key = {{ cli_key }}
          7:
            - name: '/opt/alerta/{{ appname }}/telegram_template.jinja'
            - user: '{{ appname }}'
            - group: '{{ appname }}'
            - mode: '0644'
            - contents: |
                {{ telegram_template|indent(width=18,indentfirst=False) }}

      - cmd.run:
          1:
            - name: 'systemctl daemon-reload && systemctl restart uwsgi-{{ appname }} && systemctl enable uwsgi-{{ appname }} && systemctl is-active uwsgi-{{ appname }}'
          2:
            - name: 'sleep 10 && service nginx reload'
          3: 
            - name: 'echo "INSERT INTO keys (id, key, \"user\", scopes, text, expire_time, count) VALUES (''{{ cli_key_id }}'', ''{{ cli_key }}'', ''root'', ''{admin,read,write}'', ''cli'', now() + interval ''100 years'', 0) ON CONFLICT (id) DO UPDATE SET key = ''{{ cli_key }}'', \"user\" = ''root'', scopes = ''{admin,read,write}'', text = ''cli'', expire_time = now() + interval ''100 years'';" | su -l postgres -c "psql {{ appname }}" | grep "INSERT"'
          4: 
            - name: 'echo "INSERT INTO keys (id, key, \"user\", scopes, text, expire_time, count) VALUES (''{{ telegram_key_id }}'', ''{{ telegram_key }}'', ''root'', ''{write:webhooks}'', ''telegram'', now() + interval ''100 years'', 0) ON CONFLICT (id) DO UPDATE SET key = ''{{ telegram_key }}'', \"user\" = ''root'', scopes = ''{write:webhooks}'', text = ''telegram'', expire_time = now() + interval ''100 years'';" | su -l postgres -c "psql {{ appname }}" | grep "INSERT"'
{% if customers is defined %}
  {%- for customer in customers %}
      - cmd.run:
          1: 
            - name: 'echo "INSERT INTO customers (id, match, customer) VALUES (''{{ customer["id"] }}'', ''{{ customer["match"] }}'', ''{{ customer["name"] }}'') ON CONFLICT (id) DO UPDATE SET match = ''{{ customer["match"] }}'', customer = ''{{ customer["name"] }}'';" | su -l postgres -c "psql {{ appname }}" | grep "INSERT"'
    {%- if "keys" in customer %}
      {%- for c_key in customer["keys"] %}
      - cmd.run:
          1: 
            - name: 'echo "INSERT INTO keys (id, key, \"user\", scopes, text, expire_time, count, customer) VALUES (''{{ c_key["key_id"] }}'', ''{{ c_key["key"] }}'', ''root'', ''{write:alerts,write:heartbeats}'', ''{{ c_key["name"] }}'', now() + interval ''100 years'', 0, ''{{ customer["name"] }}'') ON CONFLICT (id) DO UPDATE SET key = ''{{ c_key["key"] }}'', \"user\" = ''root'', scopes = ''{write:alerts,write:heartbeats}'', text = ''{{ c_key["name"] }}'', expire_time = now() + interval ''100 years'', customer = ''{{ customer["name"] }}'';" | su -l postgres -c "psql {{ appname }}" | grep "INSERT"'
      {%- endfor %}
    {%- endif %}
  {%- endfor %}
{% endif %}
      - cron.present:
          1:
            # otherwise it will swipe out closed (green) after default 2 hours and info after 12 hours
            - name: '/opt/alerta/{{ appname }}/venv/bin/alerta housekeeping --expired 24 --info 24'
            - identifier: alerta_housekeeping
            - user: {{ appname }}
            - minute: '*'
          2:
            - name: '/opt/alerta/{{ appname }}/venv/bin/alerta heartbeats --alert --severity major'
            - identifier: alerta_heartbeats_alert
            - user: {{ appname }}
            - minute: '*'

app:
  python_apps:
    {{ appname }}:
      enabled: True
      user: '{{ appname }}'
      group: '{{ appname }}'
      pass: '!'
      app_root: '/opt/alerta/{{ appname }}'
      shell: '/bin/bash'
      virtualenv:
        pyenv_version: '3.7.8'
        target: '/opt/alerta/{{ appname }}/venv'
      setup_script:
        cwd: '/opt/alerta/{{ appname }}/src'
        name: '~/venv/bin/pip install --upgrade uwsgi -I --no-cache-dir; ~/venv/bin/pip install --upgrade alerta-server alerta; ~/venv/bin/pip install --upgrade -r requirements.txt'
      nginx:
        link_sites-enabled: True
        reload: True
        vhost_config: 'app/alerta/vhost.conf'
        root: '/opt/alerta/{{ appname }}/html'
        server_name: '{{ domain }}'
        server_name_301: 'www.{{ domain }}'
        access_log: '/var/log/nginx/{{ appname }}.access.log'
        error_log: '/var/log/nginx/{{ appname }}.error.log'
        ssl:
          acme: True
          acme_run_ready: True
      source:
        enabled: True
        git: 'https://github.com/alerta/alerta'
        rev: '{{ version }}'
        target: '/opt/alerta/{{ appname }}/src'
        branch: 'master'
