# Notes on Windows:
# - If you delete VM and try to create the same, it may fail on "invalid main GPT header".
#   You can fix this with just changing the disk size for 1 Gb. With thin provisioning in storage this bug is not reproduced.
# - You need to catch with `lxc console xxx --type=vga` the first seconds of start to push any key to load from iso.
# - Useful docs:
#   Agent notes: https://discuss.linuxcontainers.org/t/running-windows-vm-in-lxd-is-there-an-lxd-agent-for-winodws/11792
#   How to setup Windows: https://discuss.linuxcontainers.org/t/how-to-run-a-windows-virtual-machine-on-lxd-on-linux/10397
#   Console attach: https://discuss.linuxcontainers.org/t/vga-console-connect/8814/6
# - TPM device (needed for Windows 11):
#   https://discuss.linuxcontainers.org/t/lxd-4-8-has-been-released/9458
#   and maybe (not sure) https://getlabsdone.com/how-to-enable-tpm-and-secure-boot-on-kvm/
# - Youtube tutorial on Windows 11: https://www.youtube.com/watch?v=3PDMGwbbk48
# - Make sure you have limits.cpu set for Windows 11, it will not allow setup with unlimited CPU.
# - ISO with Windows drivers: https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/
#
# Notes on VMs and Ubuntu:
# In case Instance is Virtual-Machine you need to grow internal root partition size:
# lxc stop ...
# lvchange --setactivationskip n /dev/vg_md2/virtual-machines_...block
# lvchange --activate y /dev/vg_md2/virtual-machines_...block
# parted /dev/vg_md2/virtual-machines_...block
#   resizepart 2
#   100%
#   q
# kpartx -a /dev/vg_md2/virtual-machines_...block
# e2fsck -f  /dev/mapper/vg_md2-virtual--machines_...block2
# resize2fs /dev/mapper/vg_md2-virtual--machines_...block2
# kpartx -d /dev/vg_md2/virtual-machines_test.block
# lxc start ...


lxd:
  password: randompassword
  images: # optional, images to predownload on server, no images are preloaded by default
    ubuntu/focal/amd64: # alias
      source: images:ubuntu/focal/amd64
    ubuntu/focal/amd64/vm:
      source: images:ubuntu/focal/amd64
      vm: True
  profiles:
    br0:
      devices:
        eth0:
          type: nic
          nictype: bridged
          parent: br0
    br1:
      devices:
        eth1:
          type: nic
          nictype: bridged
          parent: br1
    #test: # profile config example
    #  config:
    #    some_key: some_value
  instances:
    # actual lxd names are dots to dashes converted
    instance1.example.com: # with eth0 with mac and eth1 in br1
      # vm: True # add --vm to lxc init
      image: ubuntu/focal/amd64 # empty or remove for empty image and install from iso
      #image: ubuntu/focal/amd64/vm # use alias of vm image for virtual machines
      #init_flags: --empty -c security.secureboot=false # for Windows install from iso
      #init_flags: --empty # Windows 11 requires secureboot
      #skip_wait_exec_true: True # do not wait for successful exec of /bin/true for windows install from iso
      devices:
        root:
          type: disk
          path: /
          pool: vg_md3
          size: 10GB
        eth0: # network with mac should be added as device, not profile. enp5s0, enp6s0 etc device names are used inside vms
          type: nic
          nictype: bridged
          parent: br0
          hwaddr: aa:aa:aa:aa:aa:aa
        #tpm: # needed for windows 11
        #  type: tpm
        #iso1:
        #  type: disk
        #  source: /media/disk/ISO/Win11_English_x64v1-distrobuilder.iso
        #  boot.priority: 10
        #iso2:
        #  type: disk
        #  source: /media/disk/ISO/virtio-win-0.1.215.iso
      #config: # optional config values to apply https://lxd.readthedocs.io/en/latest/instances/
      #  limits.cpu: 1
      #  limits.memory: 1024MB
      #  limits.memory.swap: False
      #config: # minimal example for vm
      #  limits.cpu: 4
      #  limits.memory: 4GB
      profiles: # profile list will be applied on each state run
        - br1
        - autostart
        - docker # this profile allows docker inside instance
        #- privileged
        #- nfs
      #profiles: # minimal needed for vm
      #  - autostart
      bootstrap:
        ...

# boostrap examples, parameters are script specific
      bootstrap: # focal without fixed mac on eth0
        - focal_network.sh:
          - 111.111.111.111
          - 24
          - 111.111.111.100
          - '[8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1]' # '[]' - netplan yaml syntax
          - '[example.com]'
        - focal_hostname_and_hosts.sh:
          - __INSTANCE_NAME__ # special parameter __INSTANCE_NAME__ is replaced with instance name with dots
          - 111.111.111.111
          - salt1.example.com
          - 1.2.3.4
        - focal_salt_minion.sh:
          - salt1.example.com
          - 3001
      bootstrap: # focal with fixed mac on eth0
        - focal_network_mac.sh:
          - 111.111.111.111
          - 24
          - 111.111.111.100
          - '[8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1]'
          - '[example.com]'
          - aa:aa:aa:aa:aa:aa
        - focal_hostname_and_hosts.sh:
          - __INSTANCE_NAME__
          - 111.111.111.111
          - salt1.example.com
          - 1.2.3.4
        - focal_salt_minion.sh:
          - salt1.example.com
          - 3001
      bootstrap: # focal without fixed mac on eth0 with eth1
        - focal_network_two_nets.sh:
          - 111.111.111.111
          - 24
          - 111.111.111.100
          - '[8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1]'
          - '[example.com]'
          - 10.0.10.2
          - 24
        - focal_hostname_and_hosts.sh:
          - __CONTAINER_NAME__
          - 111.111.111.111
          - salt1.example.com
          - 1.2.3.4
        - focal_salt_minion.sh:
          - salt1.example.com
          - 3001
      bootstrap: # focal with fixed mac on eth0 with eth1
        - focal_network_two_nets_mac.sh:
          - 111.111.111.111
          - 24
          - 111.111.111.100
          - '[8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1]'
          - '[example.com]'
          - aa:aa:aa:aa:aa:aa
          - 10.0.10.2
          - 24
        - focal_hostname_and_hosts.sh:
          - __CONTAINER_NAME__
          - 111.111.111.111
          - salt1.example.com
          - 1.2.3.4
        - focal_salt_minion.sh:
          - salt1.example.com
          - 3001
      bootstrap: # xenial with eth0
        - xenial_network.sh:
          - 10.0.10.2
          - 255.255.255.0
          - 10.0.10.1
          - 8.8.8.8 1.1.1.1
          - example.com
        - xenial_hostname_and_hosts.sh:
          - __CONTAINER_NAME__
          - 1.2.3.4
          - salt1.example.com
        - xenial_salt_minion.sh:
          - salt1.example.com
          - 3000
      bootstrap: # bionic with eth0
        - bionic_network.sh:
          - 111.111.111.111
          - 255.255.255.0
          - 111.111.111.100
          - 8.8.8.8 1.1.1.1
          - example.com
          - aa:aa:aa:aa:aa:aa # optional for mac of eth0
        - bionic_hostname_and_hosts.sh:
          - __CONTAINER_NAME__
          - 1.2.3.4
          - salt1.example.com
        - bionic_salt_minion.sh:
          - salt1.example.com
          - 3000
      bootstrap: # bionic with eth0 and eth1
        - bionic_network_two_nets.sh:
          - 111.111.111.111
          - 255.255.255.0
          - 111.111.111.100
          - 8.8.8.8 1.1.1.1
          - example.com
          - 10.0.10.2
          - 255.255.255.0
          - aa:aa:aa:aa:aa:aa # optional for mac of eth0
        - bionic_hostname_and_hosts.sh:
          - __CONTAINER_NAME__
          - 1.2.3.4
          - salt1.example.com
        - bionic_salt_minion.sh:
          - salt1.example.com
          - 3000

# set only specific instances
... state.apply lxd.instances pillar='{lxd: {only: {"instance1.example.com"}}}'
# and allow stop and start for changes to apply
... state.apply lxd.instances pillar='{lxd: {only: {"instance1.example.com"}, allow_stop_start: True}}'
