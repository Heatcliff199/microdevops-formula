# cloud
# this should be cloud vm targeted
resolv_domain: example.com
salt_masters:
  salt1.example.com: 1.2.3.4
  salt2.example.com: 4.3.2.1
location: host.example.com
highstated: True

# this should be cloud salt master targeted
cloud:
  config_dir: /etc/salt # mandatory bug fix
  providers:
    lxc-host_example_com:
      target: host.example.com
      driver: lxc
{% set vm   = 'vm.example.com' %}
  profiles:
    {{ vm|replace(".", "_") }}:
      provider: lxc-host_example_com
      lxc_profile:
        backing: lvm
        vgname: vg_md3
        size: 10G
        template: download
        options:
          dist: debian
          release: jessie
          arch: amd64
      network_profile:
        eth0:
          link: br1
          type: veth
          flags: up
          ipv4: 10.0.0.2/24
          gateway: 10.0.0.1
      minion:
        master:
          - salt1.example.com
          - salt2.example.com
        id: {{ vm }}
        grains:
          fqdn: {{ vm }}
      lxc_conf:
        - lxc.utsname: {{ vm }}
      password: coolvmpassword
      dnsservers:
        - 8.8.8.8
        - 8.8.4.4
      lxc_post_profile:
        # 16 symbols max
        net_veth_pair_name: vgvmbr1
        lvm_root_resize: 100G
        dns_add_hn_ip: 10.0.0.2

# ufw_simple
ufw_simple:
  enabled: True
  logging: 'off'
  nat:
    enabled: True
    masquerade:
      rule_1:
        source: '10.0.0.0/16'
        out: 'br0'
      rule_2:
        source: '192.168.0.0/24'
        out: 'br0'
    dnat:
      rule_1:
        dport: '2222'
        from: '11.22.33.44'
        to: '10.0.0.2:22'
        proto: 'tcp'
        in: 'br0'
      rule_2:
        dport: '8080'
        to: '192.168.0.2:80'
        proto: 'tcp'
        in: 'br0'
    snat:
      rule_1:
        dport: '22'
        from: '11.22.33.44'
        to: '10.0.0.2'
        proto: 'tcp'
        out: 'br1'
      rule_2:
        dport: '80'
        to: '192.168.0.2'
        proto: 'tcp'
        out: 'br1'
    redirect:
      rule_1:
        dport: '5555'
        src: '11.22.33.44' # optional
        dst: '11.22.33.44' # optional
        to_ports: '6666'
        proto: 'tcp'
        in: 'br0'
    custom: # direclty paste custom iptables rules to before.rules
      nat: | # nat table
        -A POSTROUTING -s 10.0.10.0/24 -o br0 -j MASQUERADE
      filter: | # filter table
        -A FORWARD -s 10.0.0.10/32 -j ACCEPT
        -A FORWARD -d 10.0.0.10/32 -j ACCEPT
  allow: # allow/deny/reject/limit/limit_in/limit_out
    rule_1: # from list to list with to port
      proto: 'tcp'
      from:
        hostname_1: '1.2.3.4'
        hostname_2: '4.3.2.1'
      to:
        hostname_3: '2.3.4.5'
        hostname_4: '5.4.3.2'
      to_port: '8080,8090'
    rule_2: # from any to any with to port
      proto: 'tcp'
      to_port: '3306'
    rule_3: # from list to list any traffic
      from: # any if empty
        hostname_1: '1.2.3.4'
        hostname_2: '4.3.2.1'
      to: # any if empty
        hostname_3: '2.3.4.5'
        hostname_4: '5.4.3.2'
  delete:
    allow:
      rule_2: # from any to any with to port
        proto: 'tcp'
        to_port: '3306'

# users/unix -> users-formula/pillar.example

# users/windows
windows_unrestricted: True # leave the powershell in the unrestricted mode
windows_users:
  john:
    fullname: John Doe
    remove_groups: False
    password: coolpassword
    is_admin: True

# test
test:
  git_commit:
    - '/srv'

# pyenv
# limited set of versions supported in the state
pyenv:
  enabled: True
  version_2_7_13: True
  version_2_7_14: True
  version_3_5_2: True
  version_3_5_3: True

# percona
percona:
  enabled: True
  version: 5.6
  root_password: 'cooldnpassword'
  databases:
    - name: db
      character_set: utf8mb4 # optional, utf8mb4 is used by default, you cannot change this param if db is already created
      collate: utf8mb4_unicode_ci # optional, utf8mb4_unicode_ci is used by default, you cannot change this param if db is already created
  users:
    db:
      host: localhost
      password: 'userpass'
      databases:
        - database: db
          grant: ['all privileges']

# postgresql
# extensions in postgres-formula are broken:
#     Warnings: 'extensions' is an invalid keyword argument for
#              'postgres_database.present'
# hack to add uuid_ossp by formula wrapper
postgres:
...
  databases:                                                                                                                                                                                                                           
    db1:                                                                                                                                                                                                                            
      owner: 'db1'
      ...
  local:
    uuid_ossp:
      enabled: True
      databases:
        - db1

# nginx
nginx:
  enabled: True
  configs: 'nginx/app_hosting'

# sentry
pkg:
  certbot:
    when: 'PKG_BEFORE_DEPLOY'
    states:
      - git.latest:
          certbot:
            - name: https://github.com/certbot/certbot
            - target: /opt/certbot
            - force_reset: True
            - force_fetch: True
  supervisor:
    when: 'PKG_BEFORE_DEPLOY'
    states:
      - pkg_installed:
          1:
            - pkgs:
                - supervisor

pyenv:
  enabled: True
  version_2_7_14: True

nginx:
  enabled: True
  configs: 'sentry/files'

sentry:
  enabled: True
  pyenv_version: '2.7.14'
  secret: 'xxx'
  workers: '10'
  url: 'https://sentry.example.com'
  admin_email: 'admin@example.com'
  admin_password: 'adminpass'
  email:
    user: 'sentry@example.com'
    pass: 'gmailmailpass'
    host: 'smtp.gmail.com'
    port: 587
    tls: True
  db:
    db_name: 'sentry'
    user: 'sentry'
    password: 'dbpass'
    host: 'localhost'
    port: '5432'
  nginx:
    server_name: 'sentry.example.com'
    server_name_301: 'www.sentry.example.com'
    access_log: '/var/log/nginx/sentry.access.log'
    error_log: '/var/log/nginx/sentry.error.log'
    certbot_email: 'admin@example.com'
    allow_hosts: # sentry / location will be limited by nginx to those ip, while ~ /api/([\w_-]+/)?store will be open to everyone
      - '1.2.3.4'
      - '4.3.2.1'
  plugins: # Unofficial plugins only, official come with sentry-plugins, sentry-telegram already adopted
    - sentry-xxx

# php-fpm
php-fpm:
  enabled: True
  version_5_5: True # php 5.5, system repo, ubuntu 14 is required
  version_5_6: True # php 5.6, ondrej repo
  version_7_0: True # php 7.0, ondrej repo
  version_7_1: True # php 7.1, ondrej repo
  version_7_2: True # php 7.2, ondrej repo
  tz:
    php5_5: 'Etc/UTC'
  modules:
    php5_5: # and/or php5_6, php7_0, php7_1, php7_2
      - php5-mysql
      - php5-curl
      - php5-gd
      - php5-mcrypt
      - php5-memcache
      - php5-mysqlnd
      - php5-sqlite
      - php5-tidy
      - php5-xsl

# app example_php-fpm_app_1
# php 5.6 is taken from ondrej repo
pkg:
  certbot:
    when: 'PKG_BEFORE_DEPLOY'
    states:
      - git.latest:
          certbot:
            - name: https://github.com/certbot/certbot
            - target: /opt/certbot
            - force_reset: True
            - force_fetch: True

nginx:
  enabled: True
  configs: 'nginx/app_hosting'

php-fpm:
  enabled: True
  version_5_6: True
  modules:
    php5_6:
      - php5.6-mysql
      - php5.6-curl
      - php5.6-zip
      - php5.6-gd
      - php5.6-mcrypt
      - php5.6-mbstring
      - php5.6-xml
      - php5.6-soap
      - php5.6-ioncube

app:
  php-fpm_apps:
    app_1:
      enabled: True
      user: 'app_1'
      group: 'app_1'
      app_root: '/var/www/app_1'
      app_auth_keys: |
        ssh-rsa AAAA...== rsa-key-19700101
      shell: '/bin/bash'
      nginx:
        vhost_config: 'app/files/example_php-fpm_app_1/vhost.conf'
        root: '/var/www/app_1/src/public'
        server_name: 'example.com'
        server_name_301: 'www.example.com www2.example.com'
        access_log: '/var/log/nginx/app_1.access.log'
        error_log: '/var/log/nginx/app_1.error.log'
        ssl: # commercial cert example
          certs_dir: 'app/files/example_php-fpm_app_1/ssl' # those files will go to /etc/nginx/ssl/app_1 on minion, copy all cert files here and refer them below
          ssl_cert: 'ssl/app_1/app_1.crt' # in terms of nginx, e.g. as for files abobe, or you can use absolute path
          ssl_key: 'ssl/app_1/app_1.key'
          ssl_chain: 'ssl/app_1/gd_bundle-g2-g1.crt'
          certbot_for_301: True
          certbot_email: 'admin@example.com'
      pool:
        pool_config: 'app/files/example_php-fpm_app_1/pool.conf'
        php_version: '5.6'
        pm: |
          pm = ondemand
          pm.max_children = 50
          pm.process_idle_timeout = 10s
          pm.max_requests = 500
        php_admin: |
          php_admin_flag[html_errors] = off
          php_admin_value[post_max_size] = 25M
          php_admin_value[upload_max_filesize] = 25M
      source:
        enabled: True
        git: 'ssh://git@bitbucket.org/myorg/app_1'
        rev: 'master'
        target: '/var/www/app_1/src'
        branch: 'master'
        # use ssh-keygen -t ed25519, if possible since this improves readability
        repo_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ...
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
          -----END OPENSSH PRIVATE KEY-----
        repo_key_pub: |
          ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ssh_config: |
          Host: bitbucket.org
            User: git
            Identityfile /var/www/app_2/.ssh/id_repo
      files: # you can copy app configs from salt, not to store them in repo
        src: 'app/files/example_php-fpm_app_1/files'
        dst: '/var/www/app_1/src/public'
      setup_script: # e.g. after git pull to change permissions and create missing folders
        cwd: '/var/www/app_1/src'
        name: 'bash /var/www/app_1/src/etc/setup.sh'
    app_2:
      enabled: True
      user: 'app_2'
      group: 'app_2'
      app_root: '/var/www/app_2'
      app_auth_keys: |
        ssh-rsa AAAA...== rsa-key-19700101
      shell: '/bin/bash'
      nginx:
        auth_basic:
          user: 'basicuser'
          pass: 'basicpassword'
        vhost_config: 'app/files/example_php-fpm_app_2/vhost.conf'
        root: '/var/www/app_2/src/public'
        server_name: 'example.com'
        server_name_301: 'www.example.com www2.example.com'
        access_log: '/var/log/nginx/app_2.access.log'
        error_log: '/var/log/nginx/app_2.error.log'
        ssl: # certbot example
          certbot: True
          certbot_email: 'admin@example.com'
      pool:
        pool_config: 'app/files/example_php-fpm_app_2/pool.conf'
        php_version: '5.6'
        pm: |
          pm = ondemand
          pm.max_children = 50
          pm.process_idle_timeout = 10s
          pm.max_requests = 500
        php_admin: |
          php_admin_flag[html_errors] = off
          php_admin_value[post_max_size] = 25M
          php_admin_value[upload_max_filesize] = 25M
      source:
        enabled: True
        git: 'ssh://git@bitbucket.org/myorg/app_2' # either, do not use simultaneously
        hg: 'ssh://hg@bitbucket.org/myorg/app_2' # or, do not use simultaneously
        rev: 'develop'
        target: '/var/www/app_2/src'
        branch: 'develop'
        # use ssh-keygen -t ed25519, if possible since this improves readability
        repo_key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          ...
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=
          -----END OPENSSH PRIVATE KEY-----
        repo_key_pub: |
          ssh-ed25519 AAAAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ssh_config: |
          Host: bitbucket.org
            User: git
            Identityfile /var/www/app_2/.ssh/id_repo
      files: # you can copy app configs from salt, not to store them in repo
        src: 'app/files/example_php-fpm_app_2/files'
        dst: '/var/www/app_2/src/public'
      setup_script: # e.g. after git pull to change permissions and create missing folders
        cwd: '/var/www/app_2/src'
        name: 'bash /var/www/app_2/src/etc/setup.sh'

# pkg
pkg:
  some_package_group_name: # just to group and copy-paste
    when: 'PKG_PKG' # pkg.pkg will apply that group, when: 'PKG_BEFORE_DEPLOY' - pkg.before_deploy applies, when: 'PKG_AFTER_DEPLOY' - pkg.after_deploy applies
    states:
      - file.managed: # any state name
          '/etc/package1/main.conf': # state will be executed for each key of this level, - name: param is taken from the key if ommited
            - source: 'salt://pkg/package/main.conf' # you can use any params of the state
          '/etc/package1/secondary.conf':
            - contents: |
                xxx
                yyy
                zzz
      - file.directory: # just another example
          '/var/www/.well-known/':
            - makedirs: True
      - cmd_run:
          1: # keys are sorted before execution
            - name: 'compile /etc/package1/main.conf'
            - runas: 'root'
          2:
            - name: 'service package restart'
            - runas: 'root'
  postfix: # change exim to postfix for debian example
    when: 'PKG_PKG'
    states:
      - pkg_installed:
          1:
            - pkgs:
                - postfix
                - bsd-mailx
                - heirloom-mailx
      - pkg_purged:
          1:
            - pkgs:
                - exim4
                - exim4-base
                - exim4-config
                - exim4-daemon-light
      - cmd_run:
          'dpkg --purge exim4 exim4-base exim4-config exim4-daemon-light':
            - runas: root

# sysadmws-utils
sysadmws-utils:
# disk_alert
# just plain contents of disk_alert config file (see /opt/sysadmws-utils/disk_alert/disk_alert.conf)
  disk_alert: |
    DISK_ALERT_USAGE_CHECK="FREE_SPACE"
    DISK_ALERT_FREE_SPACE_CRITICAL["/"]="10000"
    DISK_ALERT_FREE_SPACE_CRITICAL["/mnt/ext"]="4000"
# mysql_replica_checker
# just plain contents of mysql_replica_checker config file (see /opt/sysadmws-utils/mysql_replica_checker/mysql_replica_checker.conf)
  mysql_replica_checker: |
    BEHIND_MASTER_THR="2000"
